

companion object {

	private const val MSG_TIMER = 0
	private const val MSG_SUCC = 1
	private const val MSG_REFRESH_VIEW = 2
	//倒计时刷新间隔
	private const val COUNT_DOWN_INTERVAL = 1000L
	//倒计时总时长
	private const val COUNT_DOWN_TIME = COUNT_DOWN_INTERVAL * 60
	private const val DELAY_SUCC_SHOW = 1000L
}

private var allTime = -1
private var stopTimeInFuture: Long = 0

private var mHandler : MyHandler = MyHandler(this)

private class MyHandler internal constructor(context: RegisterActivity) : Handler() {
	internal var context: WeakReference<RegisterActivity> = WeakReference(context)

	override fun handleMessage(msg: Message?) {
		val TAG = "RegisterActivity"
		val activity = context.get()
		if (null == activity) {
			Log.e(TAG, "handleMessage, activity is null!")
			return
		}
		when (msg!!.what) {
			//倒计时
			MSG_TIMER -> {
				val millisLeft = activity.stopTimeInFuture - SystemClock.elapsedRealtime()
				//Log.i(TAG, "millisLeft = $millisLeft")
				if (millisLeft <= 0) {
					activity.tvVerityTime.setText(R.string.send_code_aga)
					removeMessages(MSG_TIMER)
					activity.allTime = -1
				} else if (millisLeft < COUNT_DOWN_INTERVAL) {
					activity.allTime = (millisLeft / 1000).toInt()
					Log.i(TAG, "activity.allTime = ${activity.allTime}")
					activity.tvVerityTime.text = "${activity.allTime}s"
					// no tick, just delay until done
					sendMessageDelayed(obtainMessage(MSG_TIMER), millisLeft)
				} else {
					val lastTickStart = SystemClock.elapsedRealtime()
					activity.allTime = (millisLeft / 1000).toInt()
					Log.i(TAG, "activity.allTime = ${activity.allTime}")
					activity.tvVerityTime.text = "${activity.allTime}s"
					var delay = lastTickStart + COUNT_DOWN_INTERVAL - SystemClock.elapsedRealtime()
					while (delay < 0) delay += COUNT_DOWN_INTERVAL
					sendMessageDelayed(obtainMessage(MSG_TIMER), delay)
				}
			}
		}
	}
}

private fun restartTimer() {
	if (mHandler.hasMessages(MSG_TIMER)) {
		mHandler.removeMessages(MSG_TIMER)
	}
	allTime = 60
	stopTimeInFuture = SystemClock.elapsedRealtime() + COUNT_DOWN_TIME
	mHandler.sendMessage(mHandler.obtainMessage(MSG_TIMER))
}